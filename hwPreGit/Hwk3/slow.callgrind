Reading data from 'callgrind.out.27521'...
--------------------------------------------------------------------------------
Profile data file 'callgrind.out.27521' (creator: callgrind-3.13.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 237342685
Trigger: Program termination
Profiled target:  ./a.out g 100000 (PID 27521, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
           Ir 
--------------------------------------------------------------------------------
1,429,302,081  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir  file:function
--------------------------------------------------------------------------------
1,429,302,081  ???:0x0000000000000dd0 [/usr/lib64/ld-2.25.so]
1,429,194,106  ???:_start [/home/classes/cs223/class/rosand.benjamin.br384/Hwk3/a.out]
1,429,194,095  /usr/src/debug/glibc-2.25-123-gedcf13e25c/csu/../csu/libc-start.c:(below main) [/usr/lib64/libc-2.25.so]
1,429,193,042  ???:main [/home/classes/cs223/class/rosand.benjamin.br384/Hwk3/a.out]
1,415,230,414  ???:numCreate [/home/classes/cs223/class/rosand.benjamin.br384/Hwk3/a.out]
1,410,814,392  /usr/src/debug/glibc-2.25-123-gedcf13e25c/string/../sysdeps/x86_64/strlen.S:strlen [/usr/lib64/ld-2.25.so]
    6,200,000  ???:numGetDigit [/home/classes/cs223/class/rosand.benjamin.br384/Hwk3/a.out]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/src/debug/glibc-2.25-123-gedcf13e25c/string/../sysdeps/x86_64/strlen.S
--------------------------------------------------------------------------------
        Ir 

-- line 58 ----------------------------------------
         .  /* Initialize long lived registers.  */
         .  
         .  	add	%rdi, %rsi
         .  	mov	%rsi, %r10
         .  	and	$-64, %r10
         .  	mov	%rsi, %r11
         .  #endif
         .  
   100,012  	pxor	%xmm0, %xmm0
   100,012  	pxor	%xmm1, %xmm1
   100,012  	pxor	%xmm2, %xmm2
   100,012  	pxor	%xmm3, %xmm3
   100,012  	movq	%rdi, %rax
   100,012  	movq	%rdi, %rcx
   100,012  	andq	$4095, %rcx
         .  /* Offsets 4032-4047 will be aligned into 4032 thus fit into page.  */
   100,012  	cmpq	$4047, %rcx
         .  /* We cannot unify this branching as it would be ~6 cycles slower.  */
   100,012  	ja	L(cross_page)
         .  
         .  #ifdef AS_STRNLEN
         .  /* Test if end is among first 64 bytes.  */
         .  # define STRNLEN_PROLOG	\
         .  	mov	%r11, %rsi;	\
         .  	subq	%rax, %rsi;	\
         .  	andq	$-64, %rax;	\
         .  	testq	$-64, %rsi;	\
-- line 84 ----------------------------------------
-- line 98 ----------------------------------------
         .  	bsfq	%rdx, %rax;	\
         .  	ret
         .  
         .  #ifdef AS_STRNLEN
         .  	andq	$-16, %rax
         .  	FIND_ZERO
         .  #else
         .  	/* Test first 16 bytes unaligned.  */
   100,011  	movdqu	(%rax), %xmm4
   100,011  	pcmpeqb	%xmm0, %xmm4
   100,011  	pmovmskb	%xmm4, %edx
   100,011  	test	%edx, %edx
   100,011  	je 	L(next48_bytes)
         3  	bsf	%edx, %eax /* If eax is zeroed 16bit bsf can be used.  */
         3  	ret
         .  
         .  L(next48_bytes):
         .  /* Same as FIND_ZERO except we do not check first 16 bytes.  */
   100,008  	andq	$-16, %rax
   100,008  	pcmpeqb 16(%rax), %xmm1
   100,008  	pcmpeqb 32(%rax), %xmm2
   100,008  	pcmpeqb 48(%rax), %xmm3
   100,008  	pmovmskb	%xmm1, %edx
   100,008  	pmovmskb	%xmm2, %r8d
   100,008  	pmovmskb	%xmm3, %ecx
   100,008  	salq	$16, %rdx
   100,008  	salq	$16, %rcx
   100,008  	orq	%r8, %rcx
   100,008  	salq	$32, %rcx
   100,008  	orq	%rcx, %rdx
         .  #endif
         .  
         .  	/* When no zero byte is found xmm1-3 are zero so we do not have to
         .  	   zero them.  */
   600,060  	PROLOG(loop)
         .  
         .  	.p2align 4
         .  L(cross_page):
         1  	andq	$-64, %rax
        14  	FIND_ZERO
         8  	PROLOG(loop_init)
         .  
         .  #ifdef AS_STRNLEN
         .  /* We must do this check to correctly handle strnlen (s, -1).  */
         .  L(strnlen_ret):
         .  	bts	%rsi, %rdx
         .  	sarq	%cl, %rdx
         .  	test	%rdx, %rdx
         .  	je	L(loop_init)
-- line 146 ----------------------------------------
-- line 195 ----------------------------------------
         .  	ret
         .  
         .  #else
         .  
         .  	/* Main loop.  Unrolled twice to improve L2 cache performance on core2.  */
         .  	.p2align 4
         .  L(loop):
         .  
78,101,562  	movdqa	64(%rax), %xmm0
78,101,562  	pminub	80(%rax), %xmm0
78,101,562  	pminub	96(%rax), %xmm0
78,101,562  	pminub	112(%rax), %xmm0
78,101,562  	pcmpeqb	%xmm3, %xmm0
78,101,562  	pmovmskb	%xmm0, %edx
78,101,562  	testl	%edx, %edx
78,101,562  	jne	L(exit64)
         .  
78,101,562  	subq	$-128, %rax
         .  
78,101,562  	movdqa	(%rax), %xmm0
78,101,562  	pminub	16(%rax), %xmm0
78,101,562  	pminub	32(%rax), %xmm0
78,101,562  	pminub	48(%rax), %xmm0
78,101,562  	pcmpeqb	%xmm3, %xmm0
78,101,562  	pmovmskb	%xmm0, %edx
78,101,562  	testl	%edx, %edx
78,101,562  	jne	L(exit0)
78,001,560  	jmp	L(loop)
         .  
         .  	.p2align 4
         .  L(exit64):
         .  	addq	$64, %rax
         .  L(exit0):
   100,002  	pxor	%xmm0, %xmm0
 1,400,028  	FIND_ZERO
         .  
   100,002  	bsfq	%rdx, %rdx
   100,002  	addq	%rdx, %rax
   100,002  	subq	%rdi, %rax
   100,002  	ret
         .  
         .  #endif
         .  
         .  END(strlen)
         .  libc_hidden_builtin_def (strlen)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/src/debug/glibc-2.25-123-gedcf13e25c/csu/../csu/libc-start.c
--------------------------------------------------------------------------------
Ir 

-- line 125 ----------------------------------------
 .  LIBC_START_MAIN (int (*main) (int, char **, char ** MAIN_AUXVEC_DECL),
 .  		 int argc, char **argv,
 .  #ifdef LIBC_START_MAIN_AUXVEC_ARG
 .  		 ElfW(auxv_t) *auxvec,
 .  #endif
 .  		 __typeof (main) init,
 .  		 void (*fini) (void),
 .  		 void (*rtld_fini) (void), void *stack_end)
10  {
 .    /* Result of the 'main' function.  */
 .    int result;
 .  
 9    __libc_multiple_libcs = &_dl_starting_up && !_dl_starting_up;
 .  
 .  #ifndef SHARED
 .    char **ev = &argv[argc + 1];
 .  
 .    __environ = ev;
 .  
 .    /* Store the lowest stack address.  This is done in ld.so if this is
 .       the code for the DSO.  */
-- line 145 ----------------------------------------
-- line 216 ----------------------------------------
 .    THREAD_SET_POINTER_GUARD (pointer_chk_guard);
 .  # else
 .    __pointer_chk_guard_local = pointer_chk_guard;
 .  # endif
 .  
 .  #endif
 .  
 .    /* Register the destructor of the dynamic linker if there is any.  */
 2    if (__glibc_likely (rtld_fini != NULL))
 4      __cxa_atexit ((void (*) (void *)) rtld_fini, NULL, NULL);
60  => /usr/src/debug/glibc-2.25-123-gedcf13e25c/stdlib/cxa_atexit.c:__cxa_atexit (1x)
 .  
 .  #ifndef SHARED
 .    /* Call the initializer of the libc.  This is only needed here if we
 .       are compiling for the static library in which case we haven't
 .       run the constructors in `_dl_start_user'.  */
 .    __libc_init_first (argc, argv, __environ);
 .  
 .    /* Register the destructor of the program, if any.  */
-- line 233 ----------------------------------------
-- line 239 ----------------------------------------
 .       only for statically linked applications since otherwise the dynamic
 .       loader did the work already.  */
 .    if (__builtin_expect (__libc_enable_secure, 0))
 .      __libc_check_standard_fds ();
 .  #endif
 .  
 .    /* Call the initializer of the program, if any.  */
 .  #ifdef SHARED
 4    if (__builtin_expect (GLRO(dl_debug_mask) & DL_DEBUG_IMPCALLS, 0))
 .      GLRO(dl_debug_printf) ("\ninitialize program: %s\n\n", argv[0]);
 .  #endif
 2    if (init)
 5      (*init) (argc, argv, __environ MAIN_AUXVEC_PARAM);
56  => ???:__libc_csu_init (1x)
 .  
 .  #ifdef SHARED
 .    /* Auditing checkpoint: we have a new object.  */
 4    if (__glibc_unlikely (GLRO(dl_naudit) > 0))
 .      {
 .        struct audit_ifaces *afct = GLRO(dl_audit);
 .        struct link_map *head = GL(dl_ns)[LM_ID_BASE]._ns_loaded;
 .        for (unsigned int cnt = 0; cnt < GLRO(dl_naudit); ++cnt)
 .  	{
 .  	  if (afct->preinit != NULL)
 .  	    afct->preinit (&head->l_audit[cnt].cookie);
 .  
 .  	  afct = afct->next;
 .  	}
 .      }
 .  #endif
 .  
 .  #ifdef SHARED
 2    if (__glibc_unlikely (GLRO(dl_debug_mask) & DL_DEBUG_IMPCALLS))
 .      GLRO(dl_debug_printf) ("\ntransferring control: %s\n\n", argv[0]);
 .  #endif
 .  
 .  #ifndef SHARED
 .    _dl_debug_initialize (0, LM_ID_BASE);
 .  #endif
 .  #ifdef HAVE_CLEANUP_JMP_BUF
 .    /* Memory for the cancellation buffer.  */
 .    struct pthread_unwind_buf unwind_buf;
 .  
 .    int not_first_call;
 2    not_first_call = setjmp ((struct __jmp_buf_tag *) unwind_buf.cancel_jmp_buf);
29  => /usr/src/debug/glibc-2.25-123-gedcf13e25c/setjmp/../sysdeps/x86_64/bsd-_setjmp.S:_setjmp (1x)
 2    if (__glibc_likely (! not_first_call))
 .      {
 .        struct pthread *self = THREAD_SELF;
 .  
 .        /* Store old info.  */
 2        unwind_buf.priv.data.prev = THREAD_GETMEM (self, cleanup_jmp_buf);
 2        unwind_buf.priv.data.cleanup = THREAD_GETMEM (self, cleanup);
 .  
 .        /* Store the new cleanup handler info.  */
 2        THREAD_SETMEM (self, cleanup_jmp_buf, &unwind_buf);
 .  
 .        /* Run the program.  */
 6        result = main (argc, argv, __environ MAIN_AUXVEC_PARAM);
1,429,193,042  => ???:main (1x)
 .      }
 .    else
 .      {
 .        /* Remove the thread-local data.  */
 .  # ifdef SHARED
 .        PTHFCT_CALL (ptr__nptl_deallocate_tsd, ());
 .  # else
 .        extern void __nptl_deallocate_tsd (void) __attribute ((weak));
-- line 303 ----------------------------------------
-- line 321 ----------------------------------------
 .  	/* Not much left to do but to exit the thread, not the process.  */
 .  	__exit_thread ();
 .      }
 .  #else
 .    /* Nothing fancy, just call the function.  */
 .    result = main (argc, argv, __environ MAIN_AUXVEC_PARAM);
 .  #endif
 .  
 2    exit (result);
848  => /usr/src/debug/glibc-2.25-123-gedcf13e25c/stdlib/exit.c:exit (1x)
 .  }

--------------------------------------------------------------------------------
Ir 
--------------------------------------------------------------------------------
99  percentage of events annotated

